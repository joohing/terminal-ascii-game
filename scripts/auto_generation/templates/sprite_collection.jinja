// NOTE: THIS FILE IS AUTOGENERATED. ANY MANUAL CHANGES WILL BE OVERWRITTEN


const sprites = @import("sprites.zig");
const std = @import("std");

pub const SpriteCollection = struct {{'{'}}
    {% for sprite_name in sprite_names %}{{sprite_name}}: sprites.Sprite,
    {% endfor %}
{{'}'}};


pub fn load_sprite_collection(allocator: *std.mem.Allocator) !SpriteCollection {{'{'}}{% for sprite_name in sprite_names %}
    const {{sprite_name}}_file = try std.fs.cwd().openFile("assets/sprites/{{sprite_name}}.sprite", .{});
    const {{sprite_name}}_file_size: u64 = (try {{sprite_name}}_file.stat()).size;
    const {{sprite_name}}_content = try allocator.alloc(u8, @intCast({{sprite_name}}_file_size));
    _ = try {{sprite_name}}_file.read({{sprite_name}}_content);
    const {{sprite_name}}_stride = find_first_newline({{sprite_name}}_content);
    {% endfor %}


    return SpriteCollection {{'{'}}{% for sprite_name in sprite_names %}
        .{{sprite_name}} = sprites.Sprite {
            .data={{sprite_name}}_content,
            .stride_length=@intCast({{sprite_name}}_stride),
        },
    {% endfor %}
    {{'}'}};
    
    
{{'}'}}


fn find_first_newline(buffer: []u8) usize {
    for (buffer, 0..) |char, index| {
        if (char == 10) {
            return index;
        }
    }
    return 0;
}