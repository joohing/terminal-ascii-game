// NOTE: THIS FILE IS AUTOGENERATED. ANY MANUAL CHANGES WILL BE OVERWRITTEN

const std = @import("std");
const helpers = @import("helpers");

pub const Sprite = struct {
    data: []const u8,
    stride_length: u8,
    headers: Headers,
};

pub const SpriteCollection = struct {
    jonathan: Sprite,
    player: Sprite,
    MONSTER_1: Sprite,
    er: Sprite,
    dum: Sprite,
    player_projectile: Sprite,
};

const HeaderInitError = error{
    InvalidNumberOfArgs,
    IncorrectArgumentType,
    UnexpectedRotation,
};
const SpriteLoadError = error{
    InvalidNumberOfArgs,
    EmptySprite,
    NoNewline,
};

const Headers = struct {
    rotation: helpers.Direction,
    center_of_rotation_x: u8,
    center_of_rotation_y: u8,

    fn init(header_str: []u8) !Headers {
        var args: [3][]const u8 = undefined;
        var arg_count: u32 = 0;
        var spliterator = std.mem.splitAny(u8, header_str, ",");
        while (spliterator.next()) |arg| {
            args[arg_count] = arg;
            arg_count += 1;
        }

        if (arg_count != 3) {
            return HeaderInitError.InvalidNumberOfArgs;
        }

        const rotation = switch (args[0][0]) {
            'u' => helpers.Direction.Up,
            'r' => helpers.Direction.Right,
            'd' => helpers.Direction.Down,
            'l' => helpers.Direction.Left,
            else => HeaderInitError.UnexpectedRotation,
        } catch |e| {
            std.debug.print("Failed to load header rotation. Got {s}.", .{args[0]});
            return switch (e) {
                else => e,
            };
        };

        const center_of_rotation_x = std.fmt.parseInt(u8, args[1], 10) catch |e| {
            std.debug.print("Failed to load header center_of_rotation_x. Got {s}.", .{args[1]});
            return switch (e) {
                else => e,
            };
        };

        const center_of_rotation_y = std.fmt.parseInt(u8, args[2], 10) catch |e| {
            std.debug.print("Failed to load header center_of_rotation_y. Got {s}.", .{args[2]});
            return switch (e) {
                else => e,
            };
        };

        return Headers{
            .rotation = rotation,
            .center_of_rotation_x = center_of_rotation_x,
            .center_of_rotation_y = center_of_rotation_y,
        };
    }
};

pub fn load_sprite_collection(allocator: *std.mem.Allocator) !SpriteCollection {
    const jonathan_file = try std.fs.cwd().openFile("assets/sprites/jonathan.sprite", .{});
    const jonathan_file_size: u64 = (try jonathan_file.stat()).size;
    var jonathan_content = try allocator.alloc(u8, @intCast(jonathan_file_size));
    _ = try jonathan_file.read(jonathan_content);
    if (jonathan_content[jonathan_content.len - 1] != '\n') {
        std.debug.print("Sprite 'jonathan.sprite' must end in a newline\n", .{});
        return SpriteLoadError.NoNewline;
    }
    const jonathan_header_content = jonathan_content[0..find_first_newline(jonathan_content)];
    jonathan_content = jonathan_content[find_first_newline(jonathan_content) + 1 ..];
    const jonathan_header = Headers.init(jonathan_header_content) catch |e| {
        std.debug.print("Failed loading headers for file 'jonathan.sprite'. Header content: {s}\n", .{jonathan_header_content});
        return e;
    };
    if (jonathan_content.len == 0) {
        std.debug.print("Sprite 'jonathan.sprite' with header '{}'' has no content.\n", .{jonathan_header});
        return SpriteLoadError.EmptySprite;
    }
    const jonathan_stride = find_first_newline(jonathan_content);
    const jonathan_newline_count = std.mem.replace(u8, jonathan_content, "\n", "", jonathan_content);
    jonathan_content = jonathan_content[0 .. jonathan_content.len - jonathan_newline_count];

    const player_file = try std.fs.cwd().openFile("assets/sprites/player.sprite", .{});
    const player_file_size: u64 = (try player_file.stat()).size;
    var player_content = try allocator.alloc(u8, @intCast(player_file_size));
    _ = try player_file.read(player_content);
    if (player_content[player_content.len - 1] != '\n') {
        std.debug.print("Sprite 'player.sprite' must end in a newline\n", .{});
        return SpriteLoadError.NoNewline;
    }
    const player_header_content = player_content[0..find_first_newline(player_content)];
    player_content = player_content[find_first_newline(player_content) + 1 ..];
    const player_header = Headers.init(player_header_content) catch |e| {
        std.debug.print("Failed loading headers for file 'player.sprite'. Header content: {s}\n", .{player_header_content});
        return e;
    };
    if (player_content.len == 0) {
        std.debug.print("Sprite 'player.sprite' with header '{}'' has no content.\n", .{player_header});
        return SpriteLoadError.EmptySprite;
    }
    const player_stride = find_first_newline(player_content);
    const player_newline_count = std.mem.replace(u8, player_content, "\n", "", player_content);
    player_content = player_content[0 .. player_content.len - player_newline_count];

    const MONSTER_1_file = try std.fs.cwd().openFile("assets/sprites/MONSTER_1.sprite", .{});
    const MONSTER_1_file_size: u64 = (try MONSTER_1_file.stat()).size;
    var MONSTER_1_content = try allocator.alloc(u8, @intCast(MONSTER_1_file_size));
    _ = try MONSTER_1_file.read(MONSTER_1_content);
    if (MONSTER_1_content[MONSTER_1_content.len - 1] != '\n') {
        std.debug.print("Sprite 'MONSTER_1.sprite' must end in a newline\n", .{});
        return SpriteLoadError.NoNewline;
    }
    const MONSTER_1_header_content = MONSTER_1_content[0..find_first_newline(MONSTER_1_content)];
    MONSTER_1_content = MONSTER_1_content[find_first_newline(MONSTER_1_content) + 1 ..];
    const MONSTER_1_header = Headers.init(MONSTER_1_header_content) catch |e| {
        std.debug.print("Failed loading headers for file 'MONSTER_1.sprite'. Header content: {s}\n", .{MONSTER_1_header_content});
        return e;
    };
    if (MONSTER_1_content.len == 0) {
        std.debug.print("Sprite 'MONSTER_1.sprite' with header '{}'' has no content.\n", .{MONSTER_1_header});
        return SpriteLoadError.EmptySprite;
    }
    const MONSTER_1_stride = find_first_newline(MONSTER_1_content);
    const MONSTER_1_newline_count = std.mem.replace(u8, MONSTER_1_content, "\n", "", MONSTER_1_content);
    MONSTER_1_content = MONSTER_1_content[0 .. MONSTER_1_content.len - MONSTER_1_newline_count];

    const er_file = try std.fs.cwd().openFile("assets/sprites/er.sprite", .{});
    const er_file_size: u64 = (try er_file.stat()).size;
    var er_content = try allocator.alloc(u8, @intCast(er_file_size));
    _ = try er_file.read(er_content);
    if (er_content[er_content.len - 1] != '\n') {
        std.debug.print("Sprite 'er.sprite' must end in a newline\n", .{});
        return SpriteLoadError.NoNewline;
    }
    const er_header_content = er_content[0..find_first_newline(er_content)];
    er_content = er_content[find_first_newline(er_content) + 1 ..];
    const er_header = Headers.init(er_header_content) catch |e| {
        std.debug.print("Failed loading headers for file 'er.sprite'. Header content: {s}\n", .{er_header_content});
        return e;
    };
    if (er_content.len == 0) {
        std.debug.print("Sprite 'er.sprite' with header '{}'' has no content.\n", .{er_header});
        return SpriteLoadError.EmptySprite;
    }
    const er_stride = find_first_newline(er_content);
    const er_newline_count = std.mem.replace(u8, er_content, "\n", "", er_content);
    er_content = er_content[0 .. er_content.len - er_newline_count];

    const dum_file = try std.fs.cwd().openFile("assets/sprites/dum.sprite", .{});
    const dum_file_size: u64 = (try dum_file.stat()).size;
    var dum_content = try allocator.alloc(u8, @intCast(dum_file_size));
    _ = try dum_file.read(dum_content);
    if (dum_content[dum_content.len - 1] != '\n') {
        std.debug.print("Sprite 'dum.sprite' must end in a newline\n", .{});
        return SpriteLoadError.NoNewline;
    }
    const dum_header_content = dum_content[0..find_first_newline(dum_content)];
    dum_content = dum_content[find_first_newline(dum_content) + 1 ..];
    const dum_header = Headers.init(dum_header_content) catch |e| {
        std.debug.print("Failed loading headers for file 'dum.sprite'. Header content: {s}\n", .{dum_header_content});
        return e;
    };
    if (dum_content.len == 0) {
        std.debug.print("Sprite 'dum.sprite' with header '{}'' has no content.\n", .{dum_header});
        return SpriteLoadError.EmptySprite;
    }
    const dum_stride = find_first_newline(dum_content);
    const dum_newline_count = std.mem.replace(u8, dum_content, "\n", "", dum_content);
    dum_content = dum_content[0 .. dum_content.len - dum_newline_count];

    const player_projectile_file = try std.fs.cwd().openFile("assets/sprites/player_projectile.sprite", .{});
    const player_projectile_file_size: u64 = (try player_projectile_file.stat()).size;
    var player_projectile_content = try allocator.alloc(u8, @intCast(player_projectile_file_size));
    _ = try player_projectile_file.read(player_projectile_content);
    if (player_projectile_content[player_projectile_content.len - 1] != '\n') {
        std.debug.print("Sprite 'player_projectile.sprite' must end in a newline\n", .{});
        return SpriteLoadError.NoNewline;
    }
    const player_projectile_header_content = player_projectile_content[0..find_first_newline(player_projectile_content)];
    player_projectile_content = player_projectile_content[find_first_newline(player_projectile_content) + 1 ..];
    const player_projectile_header = Headers.init(player_projectile_header_content) catch |e| {
        std.debug.print("Failed loading headers for file 'player_projectile.sprite'. Header content: {s}\n", .{player_projectile_header_content});
        return e;
    };
    if (player_projectile_content.len == 0) {
        std.debug.print("Sprite 'player_projectile.sprite' with header '{}'' has no content.\n", .{player_projectile_header});
        return SpriteLoadError.EmptySprite;
    }
    const player_projectile_stride = find_first_newline(player_projectile_content);
    const player_projectile_newline_count = std.mem.replace(u8, player_projectile_content, "\n", "", player_projectile_content);
    player_projectile_content = player_projectile_content[0 .. player_projectile_content.len - player_projectile_newline_count];

    const collection = SpriteCollection{
        .jonathan = Sprite{
            .data = jonathan_content,
            .stride_length = @intCast(jonathan_stride),
            .headers = jonathan_header,
        },

        .player = Sprite{
            .data = player_content,
            .stride_length = @intCast(player_stride),
            .headers = player_header,
        },

        .MONSTER_1 = Sprite{
            .data = MONSTER_1_content,
            .stride_length = @intCast(MONSTER_1_stride),
            .headers = MONSTER_1_header,
        },

        .er = Sprite{
            .data = er_content,
            .stride_length = @intCast(er_stride),
            .headers = er_header,
        },

        .dum = Sprite{
            .data = dum_content,
            .stride_length = @intCast(dum_stride),
            .headers = dum_header,
        },

        .player_projectile = Sprite{
            .data = player_projectile_content,
            .stride_length = @intCast(player_projectile_stride),
            .headers = player_projectile_header,
        },
    };
    std.debug.print("Loaded sprites: {}\n", .{collection});
    return collection;
}

fn find_first_newline(buffer: []u8) usize {
    for (buffer, 0..) |char, index| {
        if (char == 10) {
            return index;
        }
    }
    return buffer.len;
}

fn find_longest_line(buffer: []u8) usize {
    var splitboi = std.mem.splitScalar(u8, buffer, '\n');
    var curr_len: usize = 0;

    while (splitboi.next()) |val| {
        if (val.len > curr_len) {
            curr_len = val.len;
        }
    }

    return curr_len;
}
